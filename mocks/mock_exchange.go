// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/sberserker/dcagdax/exchanges (interfaces: Exchange)

// Package mocks is a generated GoMock package.
package mocks

import (
	"context"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	exchanges "github.com/sberserker/dcagdax/exchanges"
)

// MockExchange is a mock of Exchange interface.
type MockExchange struct {
	ctrl     *gomock.Controller
	recorder *MockExchangeMockRecorder
}

// MockExchangeMockRecorder is the mock recorder for MockExchange.
type MockExchangeMockRecorder struct {
	mock *MockExchange
}

// NewMockExchange creates a new mock instance.
func NewMockExchange(ctrl *gomock.Controller) *MockExchange {
	mock := &MockExchange{ctrl: ctrl}
	mock.recorder = &MockExchangeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExchange) EXPECT() *MockExchangeMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockExchange) CreateOrder(arg0 context.Context, arg1 string, arg2 float64, arg3 exchanges.OrderTypeType, arg4 exchanges.CalcLimitOrder) (*exchanges.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(*exchanges.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockExchangeMockRecorder) CreateOrder(arg0, arg1, arg2, arg3, arg4 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockExchange)(nil).CreateOrder), arg0, arg1, arg2, arg3)
}

// Deposit mocks base method.
func (m *MockExchange) Deposit(arg0 context.Context, arg1 string, arg2 float64) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", arg0, arg1, arg2)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Deposit indicates an expected call of Deposit.
func (mr *MockExchangeMockRecorder) Deposit(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockExchange)(nil).Deposit), arg0, arg1)
}

// GetFiatAccount mocks base method.
func (m *MockExchange) GetFiatAccount(arg0 context.Context, arg1 string) (*exchanges.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiatAccount", arg0, arg1)
	ret0, _ := ret[0].(*exchanges.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFiatAccount indicates an expected call of GetFiatAccount.
func (mr *MockExchangeMockRecorder) GetFiatAccount(arg0 context.Context, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiatAccount", reflect.TypeOf((*MockExchange)(nil).GetFiatAccount), arg0)
}

// GetPendingTransfers mocks base method.
func (m *MockExchange) GetPendingTransfers(arg0 string) ([]exchanges.PendingTransfer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingTransfers", arg0)
	ret0, _ := ret[0].([]exchanges.PendingTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingTransfers indicates an expected call of GetPendingTransfers.
func (mr *MockExchangeMockRecorder) GetPendingTransfers(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingTransfers", reflect.TypeOf((*MockExchange)(nil).GetPendingTransfers), arg0)
}

// GetProduct mocks base method.
func (m *MockExchange) GetProduct(arg0 context.Context, arg1 string) (*exchanges.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", arg0, arg1)
	ret0, _ := ret[0].(*exchanges.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockExchangeMockRecorder) GetProduct(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockExchange)(nil).GetProduct), arg0)
}

// GetTicker mocks base method.
func (m *MockExchange) GetTicker(arg0 context.Context, arg1 string) (*exchanges.Ticker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTicker", arg0, arg1)
	ret0, _ := ret[0].(*exchanges.Ticker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTicker indicates an expected call of GetTicker.
func (mr *MockExchangeMockRecorder) GetTicker(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTicker", reflect.TypeOf((*MockExchange)(nil).GetTicker), arg0)
}

// GetTickerSymbol mocks base method.
func (m *MockExchange) GetTickerSymbol(arg0, arg1 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTickerSymbol", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetTickerSymbol indicates an expected call of GetTickerSymbol.
func (mr *MockExchangeMockRecorder) GetTickerSymbol(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTickerSymbol", reflect.TypeOf((*MockExchange)(nil).GetTickerSymbol), arg0, arg1)
}

// LastPurchaseTime mocks base method.
func (m *MockExchange) LastPurchaseTime(arg0 context.Context, arg1, arg2 string, arg3 time.Time) (*time.Time, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastPurchaseTime", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*time.Time)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastPurchaseTime indicates an expected call of LastPurchaseTime.
func (mr *MockExchangeMockRecorder) LastPurchaseTime(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastPurchaseTime", reflect.TypeOf((*MockExchange)(nil).LastPurchaseTime), arg0, arg1, arg2)
}
